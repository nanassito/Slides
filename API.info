# API definition

### Login a user
Log in the user using persona.  
**Request :**  
```
POST /user/auth  
'assertion' = assertion delivered by Mozilla Persona  
```
**Success response :**  
```
http200  
{  
    'status':   'okay',  
    'email':    The address contained in the assertion\, for the intended  
                person being logged in,  
    'audience': The audience value contained in the assertion. Expected to  
                be your own website URL.,  
    'expires':  The date the assertion expires\, expressed as the primitive  
                value of a Date object: that is\, the number of milliseconds  
                since midnight 01 January\, 1970 UTC.,  
    'issuer':   The hostname of the identity provider that issued the  
                assertion.  
}  
```

**Failure response :**  
```
http500  
A string explaining why verification failed.  
```


### Logout a user
Log out the user.  
**Request :** 
```
GET /user/logout  
```
**Success response :** 
```
http200  
```


### List all presentations
Get a list of all presentations for a given user.  
The user must be logged in.  
**Request :** 
```
GET /list/presentations  
```
**Success request :**
```
http200  
[{  
    'id'        : id of the presentation,  
    'title'     : title of the presentation,  
    'template'  : template used by the presentation,  
    'firstSlide': content of the first slide in the presentation,  
},…]  
```
**Failure request :** 
```
http403 // the user must be logged in.  
```
```
http500 // No presentation available  
```


### Get a presentation
Get a presentation as an html file.  
**Request :** 
```
GET /presentation/:presentation_id  
```
**Success request :**
```
http200  
Content is the whole html file.  
Each slide is a <section class="slide" data-_id=":slide_id"> in the body.  
```
**Failure request :** 
```
http500  
```


### Create a new presentation
Create a new presentation  
The user must be logged in.  
**Request :** 
```
POST /new/presentation  
'title' = title of the presentation  
'template' = url of the css to use for the presentation.  
```
**Success request :**
```
http200  
Content is the whole html file.  
There will be a default first slide.  
Each slide is a <section class="slide" data-_id=":slide_id"> in the body.  
```
**Failure request :** 
```
http400 // The post request must define 'title' and 'template'.  
```
```
http403 // the user must be logged in.  
```
```
http500 // No presentation available.  
```


### Save a slide.
Save one slide. When the slide does not exists in the database  
(eg. it's a new one), it will be created.  
**Request :** 
```
POST /presentation/:presentation_id  
'slideId' : [optional] Id of the slide. If the slide is the new one, leave it  
            undefined,
'content' : Content of the slide without the surrounding <section>
'classes' : Classes to apply to the slide.
'position': [optional] Position of the slide in the presentation (0-based).  
            If position is not set, the slide will be added at the beginning  
            of the presentation.  
```
**Success request :**
```
http200  
{  
    'slideId' : 'the id of the slide that have been saved'  
}
```
**Failure request :** 
```
http403 // the user must be logged in.  
```
```
http404 // the presentation you are trying to edit does not exists.  
```
```
http500 // In case of error, we can't be sure what really happend in the  
        // database. Please get the whole presentation.  
```


### List all available templates  
List of templates available on the server. A template is just a stylesheet.  
**Request :**  
```
GET /list/templates  
```
**Success request :**
```
http200  
[ url of the template  
,…]  
```
**Failure request :** 
```
http500  
```








################################################################################

User visible calls :
GET  /
GET  /list/presentations
GET  /presentation/?id=presentationId
GET  /presentation/?id=presentationId&mode=edit                     [restricted]
GET  /new/presentation

API calls :
    All API call must give an expected API version : { apiVersion }
    If the apiVersion parameter is not present, a http412 is returned.
POST /api/user/auth
    Login a user
    request : { certificate }
    response : { email, audience, expires, issuer }
    failure : { reason }
POST /api/user/logout
GET  /api/presentation/?id=presentationId                           [restricted]
    Return the content of the presentation
    response : { title, templateUrl, [slides] }
POST /api/slide/:slide_id                                           [restricted]
    Save a slide
    request : { content*, classes*, position* }
POST /api/new/slide                                                 [restricted]
    Create a new slide
    request : { presentationId, position* }
POST /api/new/presentation                                          [restricted]
    Create a new presentation
    request : { title, templateUrl }
    response : { id }




